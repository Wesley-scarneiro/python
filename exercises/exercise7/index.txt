Exercício 1:

    Crie as seguintes classes respeitando as suas especificações:

        - Organization: 
            Classe concreta que representa uma organização.
            Atributos:
                - name: nome da organização
                - employees: lista de funcionários empregados
                - totalEmployee: total de funcionários empregados
                - formerEmployees: lista de ex-funcionários
                - totalFemployees: total de ex-funcionários
            Métodos:
                - add_employee(): cadastra um funcionário
                - dismiss_employee(): despedir um funcionário
                - getName()
                - getTotalEmployees()
                - getTotalFemployees()
                - getEmployees(): retorna a lista de funcionários empregados
                - getFemployees(): retorna a lista de ex-funcionários

        - Employee: 
            Classe abstrata que representa todos os funcionários de uma organização.
            Nessa organização não faz sentido existir um objeto Employee, pois cada cargo será uma classe específica.
            Atributos:
                - name
                - gender
                - age
                - id
                - salary.
            Métodos concretos:
                - record(): retorna uma string com os dados básicos de um funcionário
                - getNAme()
                - getGender()
                - getAge()
                - getID()
                - getSalary()
                - __str__(): deve retornar o id de um funcionário
            Métodos abstratos:
                - bonus(): retorna um valor adicional sobre o salário, a depender do tipo de cargo.

        - Analyst:
            Classe concreta que herda Emplyoee.
            Atributos:
                - supervisor: id do supervisor a quem se reporta 
            Métodos:
                - bonus(): bônus de 5% sobre o salary
                - getSupervisor(): retorna o id do supervisor

        - Supervisor:
            Classe concreta que herda Employee
            Atributos:
                - team: objeto Team (composição), que representa a equipe em que é responsável direto 
            Métodos:
                - bonus(): bônus de 10% sobre o salário
                - getAnalysts(): retorna a lista de analistas
                - getTotalAnalyst(): retorna o número total de analistas
                - add_analyst(): adiciona um analista na equipe
        
        - Team:
            Classe concreta que representa a equipe de um supervisor.
            Atributos:
                - name: nome da equipe
                - analysts: lista de analistas
                - totalAnalyst: total de analistas
            Métodos:
                - add_analyst(): adiciona um analista na equipe
                - remove_analyst: remove um analista da equipe
                - getAnalysts(): retorna a lista de analistas
                - getTotalAnalyst()
                - __str__(): retorna o nome da equipe

Exercício 2:

    Crie a interface PlaneGeometry, que exige a implementação dos seguintes métodos:
        - perimeter(): calcula o perímetro de uma figura geométrica
        - area(): calcula a área de uma figura geométrica

    Após isso, crie as seguintes classes que estabelecerão um contrato com PlaneGeometry:
        - Triangle: representa triângulos equiláteros
        - Square
        - Rectangle
        - Trapeze: representa trapézios isósceles

